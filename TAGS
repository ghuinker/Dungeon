
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

path.c,99
static void dijkstra_open(19,247
void render_all_paths(128,3899
void render_open_paths(133,3977

path.h,1413
# define PATH_H2,15
  typedef struct corridor_path 12,134
  heap_node_t *hn;hn13,167
  uint8_t pos[pos14,186
  uint8_t from[from15,204
  int32_t cost;16,223
} corridor_path_t;17,239
  typedef enum dim 19,259
  dim_x,20,280
    dim_y,21,289
    num_dims22,300
    } dim_t;23,313
  typedef int16_t pair_t[pair_t25,327
#define DUNGEON_X 27,364
#define DUNGEON_Y 28,398
#define MIN_ROOMS 29,432
#define MAX_ROOMS 30,465
#define ROOM_MIN_X 31,498
#define ROOM_MIN_Y 32,531
#define ROOM_MAX_X 33,564
#define ROOM_MAX_Y 34,598
#define SAVE_DIR 35,631
#define DUNGEON_SAVE_FILE 36,672
#define DUNGEON_SAVE_SEMANTIC 37,713
#define DUNGEON_SAVE_VERSION 38,759
#define mapxy(40,794
#define mappair(41,829
#define hardnesspair(42,886
#define hardnessxy(43,953
  typedef enum __attribute__ ((__packed__)) terrain_type 45,999
    ter_debug,46,1058
      ter_wall,47,1073
      ter_wall_immutable,48,1089
      ter_floor,49,1115
      ter_floor_room,50,1132
      ter_floor_hall,51,1154
      } terrain_type_t;52,1176
  typedef struct room 54,1201
    pair_t position;55,1225
    pair_t size;56,1246
  } room_t;57,1263
  typedef struct dungeon 59,1276
    uint32_t num_rooms;60,1303
    room_t *rooms;rooms61,1327
    terrain_type_t map[map62,1346
    uint8_t hardness[hardness71,2017
    pair_t pc;72,2061
  } dungeon_t;73,2076
  static int32_t corridor_path_cmp(75,2092

rlg327.c,1245
#define DUMP_HARDNESS_IMAGES 17,276
# define rand_under(21,421
# define rand_range(25,564
# define UNUSED(26,637
static uint32_t in_room(34,674
static uint32_t adjacent_to_room(50,1065
static uint32_t is_open_space(58,1326
static void dijkstra_corridor(65,1427
static void dijkstra_corridor_inv(164,5164
#define hardnesspair_inv(217,6486
static int connect_two_rooms(267,9157
static int create_cycle(286,9809
static int connect_rooms(328,11374
int gaussian[gaussian341,11567
typedef struct queue_node 349,11723
  int x,350,11751
  int x, y;350,11751
  struct queue_node *next;next351,11763
} queue_node_t;352,11790
static int smooth_hardness(354,11807
static int empty_dungeon(513,16076
static int place_rooms(532,16452
static int make_rooms(569,17639
int gen_dungeon(592,18200
void render_dungeon(604,18343
void delete_dungeon(637,19007
void init_dungeon(642,19064
int write_dungeon_map(647,19121
int write_rooms(660,19350
uint32_t calculate_dungeon_size(680,19769
int makedirectory(687,20016
int write_dungeon(722,20652
int read_dungeon_map(785,22147
int read_rooms(808,22745
int calculate_num_rooms(862,24562
int read_dungeon(870,24802
int read_pgm(949,26686
void usage(1034,29089
int main(1044,29299
