
dims.h,147
# define DIMS_H2,15
typedef enum dim 7,190
  dim_x,8,209
  dim_y,9,218
  num_dims10,227
} dim_t;11,238
typedef int16_t pair_t[pair_t13,248

dungeon.c,1426
#define DUMP_HARDNESS_IMAGES 13,202
typedef struct corridor_path 15,234
  heap_node_t *hn;hn16,265
  uint8_t pos[pos17,284
  uint8_t from[from18,302
  int32_t cost;19,321
} corridor_path_t;20,337
static uint32_t adjacent_to_room(22,357
static uint32_t is_open_space(30,618
static int32_t corridor_path_cmp(35,717
static void dijkstra_corridor(39,867
static void dijkstra_corridor_inv(138,4604
#define hardnesspair_inv(191,5926
static int connect_two_rooms(241,8597
static int create_cycle(260,9249
static int connect_rooms(302,10814
int gaussian[gaussian315,11007
typedef struct queue_node 323,11163
  int x,324,11191
  int x, y;324,11191
  struct queue_node *next;next325,11203
} queue_node_t;326,11230
static int smooth_hardness(328,11247
static int empty_dungeon(487,15516
static int place_rooms(506,15892
static int make_rooms(543,17079
int gen_dungeon(566,17640
void render_dungeon(578,17783
void delete_dungeon(623,18841
void init_dungeon(628,18898
int write_dungeon_map(633,18955
int write_rooms(646,19184
uint32_t calculate_dungeon_size(666,19603
int write_dungeon(673,19850
int read_dungeon_map(736,21363
int read_rooms(759,21961
int calculate_num_rooms(813,23778
int read_dungeon(821,24018
int read_pgm(900,25920
void render_hardness_map(985,28323
void render_movement_cost_map(1008,28850
void render_distance_map(1030,29355
void render_tunnel_distance_map(1066,30306

dungeon.h,1207
# define DUNGEON_H2,18
#define DUNGEON_X 9,116
#define DUNGEON_Y 10,150
#define MIN_ROOMS 11,184
#define MAX_ROOMS 12,217
#define ROOM_MIN_X 13,250
#define ROOM_MIN_Y 14,283
#define ROOM_MAX_X 15,316
#define ROOM_MAX_Y 16,350
#define SAVE_DIR 17,383
#define DUNGEON_SAVE_FILE 18,424
#define DUNGEON_SAVE_SEMANTIC 19,465
#define DUNGEON_SAVE_VERSION 20,511
#define mappair(22,546
#define mapxy(23,603
#define hardnesspair(24,638
#define hardnessxy(25,705
typedef enum __attribute__ ((__packed__)) terrain_type 27,751
  ter_debug,28,808
  ter_wall,29,821
  ter_wall_immutable,30,833
  ter_floor,31,855
  ter_floor_room,32,868
  ter_floor_hall,33,886
} terrain_type_t;34,904
typedef struct room 36,923
  pair_t position;37,945
  pair_t size;38,964
} room_t;39,979
typedef struct pc 41,990
  pair_t position;42,1010
} pc_t;43,1029
typedef struct dungeon 45,1038
  uint32_t num_rooms;46,1063
  room_t *rooms;rooms47,1085
  terrain_type_t map[map48,1102
  uint8_t hardness[hardness57,1755
  uint8_t pc_distance[pc_distance58,1797
  uint8_t pc_tunnel[pc_tunnel59,1842
  pc_t pc;60,1885
  uint8_t nummon;61,1896
  mon_t *monsters;monsters62,1914
} dungeon_t;63,1933

heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

mon.c,171
int is_in_room(10,141
int get_bit(21,429
void shortest(25,490
void straight_path(71,1412
void move_mon(83,1718
void create_mon(124,2816
void init_monsters(139,3246

mon.h,175
# define MON_H2,14
typedef struct dungeon dungeon_t;12,146
typedef struct mon{mon14,181
  pair_t position;15,201
  char speed;16,220
  char type;17,234
} mon_t;18,247

path.c,302
static dungeon_t *dungeon;dungeon12,633
typedef struct path 14,661
  heap_node_t *hn;hn15,683
  uint8_t pos[pos16,702
} path_t;17,720
static int32_t dist_cmp(19,731
static int32_t tunnel_cmp(26,1085
void dijkstra(33,1433
#define tunnel_movement_cost(143,5925
void dijkstra_tunnel(146,6017

path.h,93
# define PATH_H2,15
# define HARDNESS_PER_TURN 4,32
typedef struct dungeon dungeon_t;6,63

rlg327.c,36
void usage(12,153
int main(22,363

utils.c,25
int makedirectory(9,124

utils.h,77
# define UTILS_H2,16
# define rand_under(6,147
# define rand_range(10,290
